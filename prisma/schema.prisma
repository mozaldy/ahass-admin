// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model SparePart {
  id                 Int       @id
  namaSparepart      String
  namaLokalSparepart String?
  kodeSparepart      String
  grupSparepart      String
  label              String
  hargaLokal         Int
  hargaNasional      Int
  hargaJual          Int
  hargaJualHET       Int
  uom                String
  rak                String?
  aktif              Boolean
  nilaiDiskon        Int
  persentaseDiskon   Int
  stok               Int
  grupKodeAHM        String
  kategoriETD        String?
  etaTercepat        DateTime
  etaTerlama         DateTime
}

model Jasa {
  kode              String @id
  nama              String
  jobType           String
  jobTypeDesc       String
  kategoriPekerjaan String
  hargaJual         Int
  waktuKerja        Int
  satuanKerja       String
  catatan           String?
  statusAktif       String
}

model Karyawan {
  id                Int         @id @default(autoincrement())
  kodeKaryawan      String
  namaKaryawan      String
  jenisKelamin      String
  alamat            String
  cityID            Int
  provinceID        Int
  noTelepon         String
  noHP              String
  kTP               String
  tanggalMasuk      DateTime
  tanggalBerhenti   DateTime
  areaID            Int
  email             String
  catatan           String
  tempatLahir       String
  tanggalLahir      DateTime
  agama             Int
  berlakuKTP        DateTime
  kebangsaan        Int
  statusKawin       Int
  statusKaryawan    Int
  statusKomisi      Int
  tipeKomisi        Int
  satuanKomisi      String
  nilaiKomisi       Float
  statusPIT         Int
  nik               String
  aktif             Boolean
  city              City        @relation(fields: [cityID], references: [id])
  province          Province    @relation(fields: [provinceID], references: [id])
  area              Area        @relation(fields: [areaID], references: [id])
  listJabatan       Jabatan[]
  listPayroll       Payroll[]
}

model City {
  id        Int      @id @default(autoincrement())
  text      String
  rowStatus Int
  flag      Int
  karyawans Karyawan[]
}

model Province {
  id           Int      @id @default(autoincrement())
  value        String
  provinceCode String
  text         String
  karyawans    Karyawan[]
}

model Area {
  id          Int      @id @default(autoincrement())
  provinceID  Int
  cityID      Int
  zipCode     String
  kelurahan   String
  kecamatan   String
  kabupaten   String
  ahmCode     String
  bpsCode     String
  rowStatus   Int
  karyawans   Karyawan[]
}

model Jabatan {
  id        Int      @id @default(autoincrement())
  jabatanID Int
  jabatan   String
  karyawanID Int
  karyawan  Karyawan @relation(fields: [karyawanID], references: [id])
}

model Payroll {
  id         Int      @id @default(autoincrement())
  payrollID  Int
  gaji       String
  nilaiGaji  Float
  aktif      Boolean
  karyawanID Int
  karyawan   Karyawan @relation(fields: [karyawanID], references: [id])
}

model Pkb {
  pkbID         Int      @id @default(autoincrement())
  soID          Int
  status        String
  soNo          String
  noPKB         String
  noPolisi      String
  totalFaktur   Float
  tipePembayran String
  tanggal       DateTime
}
